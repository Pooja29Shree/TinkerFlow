export const en = `

    <h2>Introduction</h2>
    <p>In programming, we often need to repeat certain tasks multiple times. Instead of writing the same code over and over again, Python provides us with loops. Think of loops like a farmer who needs to water 100 plants in his field. Instead of going to each plant individually and thinking about it separately, he follows a simple pattern: go to plant, water it, move to next plant, repeat until all plants are watered.</p>

    <h2>Chapter 1: For Loops</h2>
    <h3>What is a For Loop?</h3>
    <p>A for loop is used when we want to repeat a block of code a specific number of times. It is like counting from 1 to 10 or going through a list of items one by one.</p>
    <pre><code># Print numbers from 1 to 5
for number in range(1, 6):
    print("Number:", number)</code></pre>

    <h2>Chapter 2: While Loops</h2>
    <h3>What is a While Loop?</h3>
    <p>A while loop repeats a block of code as long as a certain condition is true. It is like saying "keep doing this until something specific happens." For example, "keep adding water to the bucket until it is full."</p>
    <pre><code># Count from 1 to 5 using while loop
count = 1
while count <= 5:
    print("Count:", count)
    count = count + 1 # Very important: update the variable</code></pre>

    <h2>Chapter 3: Loop Control Statements</h2>
    <p>Sometimes we need to control how our loops behave. Python gives us two special keywords for this: <code>break</code> and <code>continue</code>.</p>
    <h3>Break Statement</h3>
    <p>The break statement stops the loop immediately and exits it.</p>
    <pre><code># Find first number divisible by 7
for number in range(1, 51):
    if number % 7 == 0:
        print(f"First number divisible by 7: {number}")
        break # Exit the loop</code></pre>
    <h3>Continue Statement</h3>
    <p>The continue statement skips the rest of the current iteration and moves to the next one.</p>
    <pre><code># Print all odd numbers from 1 to 10
for number in range(1, 11):
    if number % 2 == 0: # If number is even
        continue # Skip to next iteration
    print(f"Odd number: {number}")</code></pre>

    <h2>Chapter 4: Nested Loops</h2>
    <h3>What are Nested Loops?</h3>
    <p>Nested loops are loops inside other loops. Think of this like organizing a village fair: for each day of the fair (outer loop), you need to set up each stall (inner loop).</p>
    <pre><code># Print a pattern
for row in range(1, 4): # Outer loop
    for column in range(1, 5): # Inner loop
        print("*", end=" ")
    print() # New line after each row</code></pre>

    <h2>Chapter 5: Advanced Conditional Logic with Loops</h2>
    <p>We can use complex conditions with our loops to make them more powerful.</p>
    <pre><code># Find numbers divisible by both 3 and 5
for number in range(1, 101):
    if number % 3 == 0 and number % 5 == 0:
        print(number)</code></pre>

    <h2>Chapter 6: Pattern Printing</h2>
    <p>Pattern printing is a great way to practice loops. It helps us understand how nested loops work and how to control the output.</p>
    <h3>Right Triangle</h3>
    <pre><code>rows = 5
for i in range(1, rows + 1):
    for j in range(i):
        print("*", end=" ")
    print()
</code></pre>

    <h2>Chapter 7: Iterative Problem Solving</h2>
    <p>When solving problems with loops, follow these steps: Understand the problem, identify the pattern, choose the right loop, write the solution, and test with examples.</p>
    <h3>Problem: Finding Prime Numbers</h3>
    <pre><code># Find all prime numbers between 1 and 50
for number in range(2, 51):
    is_prime = True
    for divisor in range(2, number):
        if number % divisor == 0:
            is_prime = False
            break
    if is_prime:
        print(number, end=" ")
</code></pre>
`

export const hi = `

    <h2>परिचय</h2>
    <p>प्रोग्रामिंग में, हमें अक्सर कुछ कार्यों को कई बार दोहराने की आवश्यकता होती है। एक ही कोड को बार-बार लिखने के बजाय, पायथन हमें लूप्स प्रदान करता है। लूप्स को एक किसान की तरह सोचें जिसे अपने खेत में 100 पौधों को पानी देना है। प्रत्येक पौधे के पास व्यक्तिगत रूप से जाने और अलग-अलग सोचने के बजाय, वह एक सरल पैटर्न का पालन करता है: पौधे के पास जाओ, उसे पानी दो, अगले पौधे पर जाओ, जब तक सभी पौधों को पानी न मिल जाए तब तक दोहराएं।</p>

    <h2>अध्याय 1: फॉर लूप्स</h2>
    <h3>फॉर लूप क्या है?</h3>
    <p>एक फॉर लूप का उपयोग तब किया जाता है जब हम एक कोड ब्लॉक को एक विशिष्ट संख्या में दोहराना चाहते हैं। यह 1 से 10 तक गिनने या एक-एक करके वस्तुओं की सूची से गुजरने जैसा है।</p>
    <pre><code># 1 से 5 तक की संख्याएं प्रिंट करें
for number in range(1, 6):
    print("संख्या:", number)</code></pre>

    <h2>अध्याय 2: व्हाइल लूप्स</h2>
    <h3>व्हाइल लूप क्या है?</h3>
    <p>एक व्हाइल लूप एक कोड ब्लॉक को तब तक दोहराता है जब तक कि एक निश्चित शर्त सही न हो। यह कहने जैसा है "जब तक कुछ विशेष न हो जाए तब तक यह करते रहो।" उदाहरण के लिए, "बाल्टी भर जाने तक उसमें पानी डालते रहो।"</p>
    <pre><code># व्हाइल लूप का उपयोग करके 1 से 5 तक गिनें
count = 1
while count <= 5:
    print("गिनती:", count)
    count = count + 1 # बहुत महत्वपूर्ण: चर को अपडेट करें</code></pre>

    <h2>अध्याय 3: लूप कंट्रोल स्टेटमेंट्स</h2>
    <p>कभी-कभी हमें अपने लूप्स के व्यवहार को नियंत्रित करने की आवश्यकता होती है। पायथन इसके लिए हमें दो विशेष कीवर्ड देता है: <code>break</code> और <code>continue</code>।</p>
    <h3>ब्रेक स्टेटमेंट</h3>
    <p>ब्रेक स्टेटमेंट लूप को तुरंत रोक देता है और उससे बाहर निकल जाता है।</p>
    <pre><code># 7 से विभाज्य पहली संख्या खोजें
for number in range(1, 51):
    if number % 7 == 0:
        print(f"7 से विभाज्य पहली संख्या: {number}")
        break # लूप से बाहर निकलें</code></pre>
    <h3>कंटिन्यू स्टेटमेंट</h3>
    <p>कंटिन्यू स्टेटमेंट वर्तमान पुनरावृत्ति के बाकी हिस्से को छोड़ देता है और अगले पर चला जाता है।</p>
    <pre><code># 1 से 10 तक की सभी विषम संख्याएं प्रिंट करें
for number in range(1, 11):
    if number % 2 == 0: # यदि संख्या सम है
        continue # अगली पुनरावृत्ति पर जाएं
    print(f"विषम संख्या: {number}")</code></pre>

    <h2>अध्याय 4: नेस्टेड लूप्स</h2>
    <h3>नेस्टेड लूप्स क्या हैं?</h3>
    <p>नेस्टेड लूप्स अन्य लूप्स के अंदर के लूप्स हैं। इसे एक गांव के मेले को व्यवस्थित करने की तरह सोचें: मेले के प्रत्येक दिन (बाहरी लूप) के लिए, आपको प्रत्येक स्टॉल (आंतरिक लूप) को स्थापित करने की आवश्यकता है।</p>
    <pre><code># एक पैटर्न प्रिंट करें
for row in range(1, 4): # बाहरी लूप
    for column in range(1, 5): # आंतरिक लूप
        print("*", end=" ")
    print() # प्रत्येक पंक्ति के बाद नई पंक्ति</code></pre>

    <h2>अध्याय 5: लूप्स के साथ उन्नत सशर्त तर्क</h2>
    <p>हम अपने लूप्स को और अधिक शक्तिशाली बनाने के लिए जटिल शर्तों का उपयोग कर सकते हैं।</p>
    <pre><code># 3 और 5 दोनों से विभाज्य संख्याएं खोजें
for number in range(1, 101):
    if number % 3 == 0 and number % 5 == 0:
        print(number)</code></pre>

    <h2>अध्याय 6: पैटर्न प्रिंटिंग</h2>
    <p>पैटर्न प्रिंटिंग लूप्स का अभ्यास करने का एक शानदार तरीका है। यह हमें यह समझने में मदद करता है कि नेस्टेड लूप्स कैसे काम करते हैं और आउटपुट को कैसे नियंत्रित किया जाता है।</p>
    <h3>समकोण त्रिभुज</h3>
    <pre><code>rows = 5
for i in range(1, rows + 1):
    for j in range(i):
        print("*", end=" ")
    print()
</code></pre>

    <h2>अध्याय 7: पुनरावृत्ति समस्या समाधान</h2>
    <p>लूप्स के साथ समस्याओं को हल करते समय, इन चरणों का पालन करें: समस्या को समझें, पैटर्न की पहचान करें, सही लूप चुनें, समाधान लिखें, और उदाहरणों के साथ परीक्षण करें।</p>
    <h3>समस्या: अभाज्य संख्याएं खोजना</h3>
    <pre><code># 1 और 50 के बीच की सभी अभाज्य संख्याएं खोजें
for number in range(2, 51):
    is_prime = True
    for divisor in range(2, number):
        if number % divisor == 0:
            is_prime = False
            break
    if is_prime:
        print(number, end=" ")
</code></pre>
`;

export const kn = `

    <h2>ಪರಿಚಯ</h2>
    <p>ಪ್ರೋಗ್ರಾಮಿಂಗ್‌ನಲ್ಲಿ, ನಾವು ಆಗಾಗ್ಗೆ ಕೆಲವು ಕಾರ್ಯಗಳನ್ನು ಹಲವು ಬಾರಿ ಪುನರಾವರ್ತಿಸಬೇಕಾಗುತ್ತದೆ. ಒಂದೇ ಕೋಡ್ ಅನ್ನು ಮತ್ತೆ ಮತ್ತೆ ಬರೆಯುವ ಬದಲು, ಪೈಥಾನ್ ನಮಗೆ ಲೂಪ್‌ಗಳನ್ನು ಒದಗಿಸುತ್ತದೆ. ಲೂಪ್‌ಗಳನ್ನು ತನ್ನ ಹೊಲದಲ್ಲಿರುವ 100 ಸಸ್ಯಗಳಿಗೆ ನೀರು ಹಾಕಬೇಕಾದ ರೈತನಂತೆ ಯೋಚಿಸಿ. ಪ್ರತಿ ಸಸ್ಯಕ್ಕೆ ಪ್ರತ್ಯೇಕವಾಗಿ ಹೋಗಿ ಅದರ ಬಗ್ಗೆ ಪ್ರತ್ಯೇಕವಾಗಿ ಯೋಚಿಸುವ ಬದಲು, ಅವನು ಒಂದು ಸರಳ ಮಾದರಿಯನ್ನು ಅನುಸರಿಸುತ್ತಾನೆ: ಸಸ್ಯಕ್ಕೆ ಹೋಗಿ, ಅದಕ್ಕೆ ನೀರು ಹಾಕಿ, ಮುಂದಿನ ಸಸ್ಯಕ್ಕೆ ಹೋಗಿ, ಎಲ್ಲಾ ಸಸ್ಯಗಳಿಗೆ ನೀರು ಹಾಕುವವರೆಗೆ ಪುನರಾವರ್ತಿಸಿ.</p>

    <h2>ಅಧ್ಯಾಯ 1: For ಲೂಪ್‌ಗಳು</h2>
    <h3>For ಲೂಪ್ ಎಂದರೇನು?</h3>
    <p>ಒಂದು ನಿರ್ದಿಷ್ಟ ಸಂಖ್ಯೆಯ ಬಾರಿ ಕೋಡ್‌ನ ಬ್ಲಾಕ್ ಅನ್ನು ಪುನರಾವರ್ತಿಸಲು ನಾವು ಬಯಸಿದಾಗ For ಲೂಪ್ ಅನ್ನು ಬಳಸಲಾಗುತ್ತದೆ. ಇದು 1 ರಿಂದ 10 ರವರೆಗೆ ಎಣಿಸುವಂತೆ ಅಥವಾ ಒಂದು ವಸ್ತುವಿನ ಪಟ್ಟಿಯ ಮೂಲಕ ಒಂದೊಂದಾಗಿ ಹೋಗುವಂತೆ.</p>
    <pre><code># 1 ರಿಂದ 5 ರವರೆಗಿನ ಸಂಖ್ಯೆಗಳನ್ನು ಮುದ್ರಿಸಿ
for number in range(1, 6):
    print("ಸಂಖ್ಯೆ:", number)</code></pre>

    <h2>ಅಧ್ಯಾಯ 2: While ಲೂಪ್‌ಗಳು</h2>
    <h3>While ಲೂಪ್ ಎಂದರೇನು?</h3>
    <p>ಒಂದು ನಿರ್ದಿಷ್ಟ ಷರತ್ತು ನಿಜವಾಗುವವರೆಗೆ While ಲೂಪ್ ಕೋಡ್‌ನ ಬ್ಲಾಕ್ ಅನ್ನು ಪುನರಾವರ್ತಿಸುತ್ತದೆ. ಇದು "ನಿರ್ದಿಷ್ಟ ಏನಾದರೂ ಸಂಭವಿಸುವವರೆಗೆ ಇದನ್ನು ಮಾಡುತ್ತಿರಿ" ಎಂದು ಹೇಳಿದಂತೆ. ಉದಾಹರಣೆಗೆ, "ಬಕೆಟ್ ತುಂಬುವವರೆಗೆ ಅದಕ್ಕೆ ನೀರು ಸೇರಿಸುತ್ತಿರಿ."</p>
    <pre><code># While ಲೂಪ್ ಬಳಸಿ 1 ರಿಂದ 5 ರವರೆಗೆ ಎಣಿಸಿ
count = 1
while count <= 5:
    print("ಎಣಿಕೆ:", count)
    count = count + 1 # ಬಹಳ ಮುಖ್ಯ: ವೇರಿಯೇಬಲ್ ಅನ್ನು ನವೀಕರಿಸಿ</code></pre>

    <h2>ಅಧ್ಯಾಯ 3: ಲೂಪ್ ನಿಯಂತ್ರಣ ಹೇಳಿಕೆಗಳು</h2>
    <p>ಕೆಲವೊಮ್ಮೆ ನಾವು ನಮ್ಮ ಲೂಪ್‌ಗಳು ಹೇಗೆ ವರ್ತಿಸುತ್ತವೆ ಎಂಬುದನ್ನು ನಿಯಂತ್ರಿಸಬೇಕಾಗುತ್ತದೆ. ಪೈಥಾನ್ ಇದಕ್ಕಾಗಿ ನಮಗೆ ಎರಡು ವಿಶೇಷ ಕೀವರ್ಡ್‌ಗಳನ್ನು ನೀಡುತ್ತದೆ: <code>break</code> ಮತ್ತು <code>continue</code>.</p>
    <h3>break ಹೇಳಿಕೆ</h3>
    <p>break ಹೇಳಿಕೆಯು ತಕ್ಷಣವೇ ಲೂಪ್ ಅನ್ನು ನಿಲ್ಲಿಸುತ್ತದೆ ಮತ್ತು ಅದರಿಂದ ನಿರ್ಗಮಿಸುತ್ತದೆ.</p>
    <pre><code># 7 ರಿಂದ ಭಾಗಿಸಬಹುದಾದ ಮೊದಲ ಸಂಖ್ಯೆಯನ್ನು ಹುಡುಕಿ
for number in range(1, 51):
    if number % 7 == 0:
        print(f"7 ರಿಂದ ಭಾಗಿಸಬಹುದಾದ ಮೊದಲ ಸಂಖ್ಯೆ: {number}")
        break # ಲೂಪ್‌ನಿಂದ ನಿರ್ಗಮಿಸಿ</code></pre>
    <h3>continue ಹೇಳಿಕೆ</h3>
    <p>continue ಹೇಳಿಕೆಯು ಪ್ರಸ್ತುತ ಪುನರಾವರ್ತನೆಯ ಉಳಿದ ಭಾಗವನ್ನು ಬಿಟ್ಟು ಮುಂದಿನದಕ್ಕೆ ಚಲಿಸುತ್ತದೆ.</p>
    <pre><code># 1 ರಿಂದ 10 ರವರೆಗಿನ ಎಲ್ಲಾ ಬೆಸ ಸಂಖ್ಯೆಗಳನ್ನು ಮುದ್ರಿಸಿ
for number in range(1, 11):
    if number % 2 == 0: # ಸಂಖ್ಯೆ ಸಮವಾಗಿದ್ದರೆ
        continue # ಮುಂದಿನ ಪುನರಾವರ್ತನೆಗೆ ಹೋಗಿ
    print(f"ಬೆಸ ಸಂಖ್ಯೆ: {number}")</code></pre>

    <h2>ಅಧ್ಯಾಯ 4: ನೆಸ್ಟೆಡ್ ಲೂಪ್‌ಗಳು</h2>
    <h3>ನೆಸ್ಟೆಡ್ ಲೂಪ್‌ಗಳು ಎಂದರೇನು?</h3>
    <p>ನೆಸ್ಟೆಡ್ ಲೂಪ್‌ಗಳು ಇತರ ಲೂಪ್‌ಗಳ ಒಳಗಿರುವ ಲೂಪ್‌ಗಳಾಗಿವೆ. ಇದನ್ನು ಗ್ರಾಮದ ಜಾತ್ರೆಯನ್ನು ಆಯೋಜಿಸಿದಂತೆ ಯೋಚಿಸಿ: ಜಾತ್ರೆಯ ಪ್ರತಿ ದಿನಕ್ಕೆ (ಹೊರಗಿನ ಲೂಪ್), ನೀವು ಪ್ರತಿ ಸ್ಟಾಲ್ ಅನ್ನು (ಒಳಗಿನ ಲೂಪ್) ಸ್ಥಾಪಿಸಬೇಕು.</p>
    <pre><code># ಒಂದು ಮಾದರಿಯನ್ನು ಮುದ್ರಿಸಿ
for row in range(1, 4): # ಹೊರಗಿನ ಲೂಪ್
    for column in range(1, 5): # ಒಳಗಿನ ಲೂಪ್
        print("*", end=" ")
    print() # ಪ್ರತಿ ಸಾಲಿನ ನಂತರ ಹೊಸ ಸಾಲು</code></pre>

    <h2>ಅಧ್ಯಾಯ 5: ಲೂಪ್‌ಗಳೊಂದಿಗೆ ಸುಧಾರಿತ ಷರತ್ತುಬದ್ಧ ತರ್ಕ</h2>
    <p>ನಮ್ಮ ಲೂಪ್‌ಗಳನ್ನು ಹೆಚ್ಚು ಶಕ್ತಿಶಾಲಿಯಾಗಿಸಲು ನಾವು ಸಂಕೀರ್ಣ ಪರಿಸ್ಥಿತಿಗಳನ್ನು ಬಳಸಬಹುದು.</p>
    <pre><code># 3 ಮತ್ತು 5 ಎರಡರಿಂದಲೂ ಭಾಗಿಸಬಹುದಾದ ಸಂಖ್ಯೆಗಳನ್ನು ಹುಡುಕಿ
for number in range(1, 101):
    if number % 3 == 0 and number % 5 == 0:
        print(number)</code></pre>

    <h2>ಅಧ್ಯಾಯ 6: ಮಾದರಿ ಮುದ್ರಣ</h2>
    <p>ಮಾದರಿ ಮುದ್ರಣವು ಲೂಪ್‌ಗಳನ್ನು ಅಭ್ಯಾಸ ಮಾಡಲು ಉತ್ತಮ ಮಾರ್ಗವಾಗಿದೆ. ಇದು ನೆಸ್ಟೆಡ್ ಲೂಪ್‌ಗಳು ಹೇಗೆ ಕಾರ್ಯನಿರ್ವಹಿಸುತ್ತವೆ ಮತ್ತು ಔಟ್‌ಪುಟ್ ಅನ್ನು ಹೇಗೆ ನಿಯಂತ್ರಿಸುವುದು ಎಂಬುದನ್ನು ಅರ್ಥಮಾಡಿಕೊಳ್ಳಲು ನಮಗೆ ಸಹಾಯ ಮಾಡುತ್ತದೆ.</p>
    <h3>ಲಂಬ ಕೋನ ತ್ರಿಭುಜ</h3>
    <pre><code>rows = 5
for i in range(1, rows + 1):
    for j in range(i):
        print("*", end=" ")
    print()
</code></pre>

    <h2>ಅಧ್ಯಾಯ 7: ಪುನರಾವರ್ತಿತ ಸಮಸ್ಯೆ ಪರಿಹಾರ</h2>
    <p>ಲೂಪ್‌ಗಳೊಂದಿಗೆ ಸಮಸ್ಯೆಗಳನ್ನು ಪರಿಹರಿಸುವಾಗ, ಈ ಹಂತಗಳನ್ನು ಅನುಸರಿಸಿ: ಸಮಸ್ಯೆಯನ್ನು ಅರ್ಥಮಾಡಿಕೊಳ್ಳಿ, ಮಾದರಿಯನ್ನು ಗುರುತಿಸಿ, ಸರಿಯಾದ ಲೂಪ್ ಅನ್ನು ಆರಿಸಿ, ಪರಿಹಾರವನ್ನು ಬರೆಯಿರಿ ಮತ್ತು ಉದಾಹರಣೆಗಳೊಂದಿಗೆ ಪರೀಕ್ಷಿಸಿ.</p>
    <h3>ಸಮಸ್ಯೆ: ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಗಳನ್ನು ಕಂಡುಹಿಡಿಯುವುದು</h3>
    <pre><code># 1 ಮತ್ತು 50 ರ ನಡುವಿನ ಎಲ್ಲಾ ಅವಿಭಾಜ್ಯ ಸಂಖ್ಯೆಗಳನ್ನು ಹುಡುಕಿ
for number in range(2, 51):
    is_prime = True
    for divisor in range(2, number):
        if number % divisor == 0:
            is_prime = False
            break
    if is_prime:
        print(number, end=" ")
</code></pre>
`;

export const ml = `

    <h2>ആമുഖം</h2>
    <p>പ്രോഗ്രാമിംഗിൽ, നമുക്ക് ചില ജോലികൾ പലതവണ ആവർത്തിക്കേണ്ടി വരാറുണ്ട്. ഒരേ കോഡ് വീണ്ടും വീണ്ടും എഴുതുന്നതിന് പകരം, പൈത്തൺ നമുക്ക് ലൂപ്പുകൾ നൽകുന്നു. ലൂപ്പുകളെ തന്റെ വയലിലെ 100 ചെടികൾക്ക് വെള്ളം നനയ്‌ക്കേണ്ട ഒരു കർഷകനെപ്പോലെ ചിന്തിക്കുക. ഓരോ ചെടിയുടെയും അടുത്തേക്ക് വ്യക്തിപരമായി പോയി അതിനെക്കുറിച്ച് പ്രത്യേകം ചിന്തിക്കുന്നതിന് പകരം, അദ്ദേഹം ഒരു ലളിതമായ പാറ്റേൺ പിന്തുടരുന്നു: ചെടിയുടെ അടുത്തേക്ക് പോകുക, അതിന് വെള്ളം നനയ്‌ക്കുക, അടുത്ത ചെടിയിലേക്ക് നീങ്ങുക, എല്ലാ ചെടികൾക്കും വെള്ളം നനയ്‌ക്കുന്നത് വരെ ആവർത്തിക്കുക.</p>

    <h2>അദ്ധ്യായം 1: For ലൂപ്പുകൾ</h2>
    <h3>എന്താണ് ഒരു For ലൂപ്പ്?</h3>
    <p>ഒരു കോഡ് ബ്ലോക്ക് ഒരു പ്രത്യേക തവണ ആവർത്തിക്കാൻ നമ്മൾ ആഗ്രഹിക്കുമ്പോൾ ഒരു For ലൂപ്പ് ഉപയോഗിക്കുന്നു. ഇത് 1 മുതൽ 10 വരെ എണ്ണുന്നതുപോലെയോ അല്ലെങ്കിൽ ഒരു ലിസ്റ്റിലെ ഇനങ്ങളിലൂടെ ഒന്നൊന്നായി പോകുന്നതുപോലെയോ ആണ്.</p>
    <pre><code># 1 മുതൽ 5 വരെയുള്ള സംഖ്യകൾ പ്രിന്റ് ചെയ്യുക
for number in range(1, 6):
    print("സംഖ്യ:", number)</code></pre>

    <h2>അദ്ധ്യായം 2: While ലൂപ്പുകൾ</h2>
    <h3>എന്താണ് ഒരു While ലൂപ്പ്?</h3>
    <p>ഒരു പ്രത്യേക വ്യവസ്ഥ True ആയിരിക്കുന്നിടത്തോളം കാലം ഒരു While ലൂപ്പ് കോഡ് ബ്ലോക്ക് ആവർത്തിക്കുന്നു. ഇത് "ഒരു പ്രത്യേക കാര്യം സംഭവിക്കുന്നത് വരെ ഇത് ചെയ്തുകൊണ്ടിരിക്കുക" എന്ന് പറയുന്നതുപോലെയാണ്. ഉദാഹരണത്തിന്, "ബക്കറ്റ് നിറയുന്നത് വരെ അതിലേക്ക് വെള്ളം ഒഴിച്ചുകൊണ്ടിരിക്കുക."</p>
    <pre><code># while ലൂപ്പ് ഉപയോഗിച്ച് 1 മുതൽ 5 വരെ എണ്ണുക
count = 1
while count <= 5:
    print("എണ്ണം:", count)
    count = count + 1 # വളരെ പ്രധാനപ്പെട്ടത്: വേരിയബിൾ അപ്‌ഡേറ്റ് ചെയ്യുക</code></pre>

    <h2>അദ്ധ്യായം 3: ലൂപ്പ് നിയന്ത്രണ സ്റ്റേറ്റ്‌മെന്റുകൾ</h2>
    <p>ചിലപ്പോൾ നമ്മുടെ ലൂപ്പുകൾ എങ്ങനെ പ്രവർത്തിക്കുന്നു എന്ന് നമുക്ക് നിയന്ത്രിക്കേണ്ടി വരും. ഇതിനായി പൈത്തൺ നമുക്ക് രണ്ട് പ്രത്യേക കീവേഡുകൾ നൽകുന്നു: <code>break</code>, <code>continue</code>.</p>
    <h3>break സ്റ്റേറ്റ്‌മെന്റ്</h3>
    <p>break സ്റ്റേറ്റ്‌മെന്റ് ലൂപ്പിനെ തൽക്ഷണം നിർത്തി അതിൽ നിന്ന് പുറത്തുകടക്കുന്നു.</p>
    <pre><code># 7 കൊണ്ട് ഹരിക്കാവുന്ന ആദ്യ സംഖ്യ കണ്ടെത്തുക
for number in range(1, 51):
    if number % 7 == 0:
        print(f"7 കൊണ്ട് ഹരിക്കാവുന്ന ആദ്യ സംഖ്യ: {number}")
        break # ലൂപ്പിൽ നിന്ന് പുറത്തുകടക്കുക</code></pre>
    <h3>continue സ്റ്റേറ്റ്‌മെന്റ്</h3>
    <p>continue സ്റ്റേറ്റ്‌മെന്റ് നിലവിലെ ആവർത്തനത്തിന്റെ ബാക്കി ഭാഗം ഒഴിവാക്കി അടുത്തതിലേക്ക് നീങ്ങുന്നു.</p>
    <pre><code># 1 മുതൽ 10 വരെയുള്ള എല്ലാ ഒറ്റ സംഖ്യകളും പ്രിന്റ് ചെയ്യുക
for number in range(1, 11):
    if number % 2 == 0: # സംഖ്യ ഇരട്ടയാണെങ്കിൽ
        continue # അടുത്ത ആവർത്തനത്തിലേക്ക് പോകുക
    print(f"ഒറ്റ സംഖ്യ: {number}")</code></pre>

    <h2>അദ്ധ്യായം 4: നെസ്റ്റഡ് ലൂപ്പുകൾ</h2>
    <h3>എന്താണ് നെസ്റ്റഡ് ലൂപ്പുകൾ?</h3>
    <p>നെസ്റ്റഡ് ലൂപ്പുകൾ മറ്റ് ലൂപ്പുകൾക്കുള്ളിലെ ലൂപ്പുകളാണ്. ഒരു ഗ്രാമത്തിലെ മേള സംഘടിപ്പിക്കുന്നതുപോലെ ഇതിനെക്കുറിച്ച് ചിന്തിക്കുക: മേളയുടെ ഓരോ ദിവസത്തിനും (പുറത്തെ ലൂപ്പ്), നിങ്ങൾ ഓരോ സ്റ്റാളും (അകത്തെ ലൂപ്പ്) സ്ഥാപിക്കേണ്ടതുണ്ട്.</p>
    <pre><code># ഒരു പാറ്റേൺ പ്രിന്റ് ചെയ്യുക
for row in range(1, 4): # പുറത്തെ ലൂപ്പ്
    for column in range(1, 5): # അകത്തെ ലൂപ്പ്
        print("*", end=" ")
    print() # ഓരോ വരിക്ക് ശേഷവും പുതിയ വരി</code></pre>

    <h2>അദ്ധ്യായം 5: ലൂപ്പുകൾ ഉപയോഗിച്ചുള്ള വിപുലമായ വ്യവസ്ഥാപരമായ ലോജിക്</h2>
    <p>നമ്മുടെ ലൂപ്പുകളെ കൂടുതൽ ശക്തമാക്കാൻ നമുക്ക് സങ്കീർണ്ണമായ വ്യവസ്ഥകൾ ഉപയോഗിക്കാം.</p>
    <pre><code># 3-ഉം 5-ഉം കൊണ്ട് ഹരിക്കാവുന്ന സംഖ്യകൾ കണ്ടെത്തുക
for number in range(1, 101):
    if number % 3 == 0 and number % 5 == 0:
        print(number)</code></pre>

    <h2>അദ്ധ്യായം 6: പാറ്റേൺ പ്രിന്റിംഗ്</h2>
    <p>ലൂപ്പുകൾ പരിശീലിക്കാൻ ഒരു മികച്ച മാർഗ്ഗമാണ് പാറ്റേൺ പ്രിന്റിംഗ്. നെസ്റ്റഡ് ലൂപ്പുകൾ എങ്ങനെ പ്രവർത്തിക്കുന്നു എന്നും ഔട്ട്പുട്ട് എങ്ങനെ നിയന്ത്രിക്കാമെന്നും ഇത് മനസ്സിലാക്കാൻ നമ്മെ സഹായിക്കുന്നു.</p>
    <h3>വലത് ത്രികോണം</h3>
    <pre><code>rows = 5
for i in range(1, rows + 1):
    for j in range(i):
        print("*", end=" ")
    print()
</code></pre>

    <h2>അദ്ധ്യായം 7: ആവർത്തന പ്രശ്നപരിഹാരം</h2>
    <p>ലൂപ്പുകൾ ഉപയോഗിച്ച് പ്രശ്നങ്ങൾ പരിഹരിക്കുമ്പോൾ, ഈ ഘട്ടങ്ങൾ പാലിക്കുക: പ്രശ്നം മനസ്സിലാക്കുക, പാറ്റേൺ തിരിച്ചറിയുക, ശരിയായ ലൂപ്പ് തിരഞ്ഞെടുക്കുക, പരിഹാരം എഴുതുക, ഉദാഹരണങ്ങൾ ഉപയോഗിച്ച് പരിശോധിക്കുക.</p>
    <h3>പ്രശ്നം: അഭാജ്യ സംഖ്യകൾ കണ്ടെത്തുക</h3>
    <pre><code># 1-നും 50-നും ഇടയിലുള്ള എല്ലാ അഭാജ്യ സംഖ്യകളും കണ്ടെത്തുക
for number in range(2, 51):
    is_prime = True
    for divisor in range(2, number):
        if number % divisor == 0:
            is_prime = False
            break
    if is_prime:
        print(number, end=" ")
</code></pre>
`;

export const ta = `

    <h2>அறிமுகம்</h2>
    <p>நிரலாக்கத்தில், நாம் சில நேரங்களில் சில பணிகளை பல முறை திரும்பத் திரும்ப செய்ய வேண்டும். ஒரே குறியீட்டை மீண்டும் மீண்டும் எழுதுவதற்குப் பதிலாக, பைதான் நமக்கு சுழற்சிகளை வழங்குகிறது. சுழற்சிகளை ஒரு விவசாயியைப் போல நினைத்துக் கொள்ளுங்கள், அவர் தன் வயலில் உள்ள 100 செடிகளுக்கு நீர் பாய்ச்ச வேண்டும். ஒவ்வொரு செடிக்கும் தனித்தனியாக சென்று தனித்தனியாக யோசிப்பதற்குப் பதிலாக, அவர் ஒரு எளிய முறையைப் பின்பற்றுகிறார்: செடிக்குச் செல், நீர் பாய்ச்சு, அடுத்த செடிக்குச் செல், அனைத்து செடிகளுக்கும் நீர் பாய்ச்சும் வரை இதை மீண்டும் செய்.</p>

    <h2>அத்தியாயம் 1: for சுழற்சிகள்</h2>
    <h3>for சுழற்சி என்றால் என்ன?</h3>
    <p>ஒரு குறிப்பிட்ட எண்ணிக்கையிலான முறை ஒரு குறியீட்டுத் தொகுதியை மீண்டும் மீண்டும் செய்ய நாம் விரும்பும்போது for சுழற்சி பயன்படுத்தப்படுகிறது. இது 1 முதல் 10 வரை எண்ணுவது அல்லது ஒரு பட்டியல் உள்ள உருப்படிகள் வழியாக ஒவ்வொன்றாகச் செல்வது போன்றது.</p>
    <pre><code># 1 முதல் 5 வரையிலான எண்களை அச்சிடு
for number in range(1, 6):
    print("எண்:", number)</code></pre>

    <h2>அத்தியாயம் 2: while சுழற்சிகள்</h2>
    <h3>while சுழற்சி என்றால் என்ன?</h3>
    <p>ஒரு குறிப்பிட்ட நிபந்தனை உண்மையாக இருக்கும் வரை while சுழற்சி ஒரு குறியீட்டுத் தொகுதியை மீண்டும் மீண்டும் செய்கிறது. இது "ஒரு குறிப்பிட்ட விஷயம் நடக்கும் வரை இதைத் தொடர்ந்து செய்" என்று சொல்வது போன்றது. எடுத்துக்காட்டாக, "வாளி நிரம்பும் வரை அதில் தொடர்ந்து நீர் சேர்."</p>
    <pre><code># while சுழற்சியைப் பயன்படுத்தி 1 முதல் 5 வரை எண்ணு
count = 1
while count <= 5:
    print("எண்ணிக்கை:", count)
    count = count + 1 # மிக முக்கியம்: மாறியை புதுப்பிக்கவும்</code></pre>

    <h2>அத்தியாயம் 3: சுழற்சி கட்டுப்பாட்டு அறிக்கைகள்</h2>
    <p>சில நேரங்களில் நாம் நமது சுழற்சிகள் எவ்வாறு செயல்படுகின்றன என்பதைக் கட்டுப்படுத்த வேண்டும். பைதான் இதற்காக நமக்கு இரண்டு சிறப்பு குறிச்சொற்களை வழங்குகிறது: <code>break</code> மற்றும் <code>continue</code>.</p>
    <h3>break அறிக்கை</h3>
    <p>break அறிக்கை சுழற்சியை உடனடியாக நிறுத்தி அதிலிருந்து வெளியேறுகிறது.</p>
    <pre><code># 7 ஆல் வகுபடும் முதல் எண்ணைக் கண்டறியவும்
for number in range(1, 51):
    if number % 7 == 0:
        print(f"7 ஆல் வகுபடும் முதல் எண்: {number}")
        break # சுழற்சியில் இருந்து வெளியேறு</code></pre>
    <h3>continue அறிக்கை</h3>
    <p>continue அறிக்கை தற்போதைய செயல்பாட்டின் மீதியைத் தவிர்த்துவிட்டு அடுத்ததற்குச் செல்கிறது.</p>
    <pre><code># 1 முதல் 10 வரையிலான அனைத்து ஒற்றைப்படை எண்களையும் அச்சிடு
for number in range(1, 11):
    if number % 2 == 0: # எண் இரட்டைப்படை என்றால்
        continue # அடுத்த செயல்பாட்டிற்குச் செல்
    print(f"ஒற்றைப்படை எண்: {number}")</code></pre>

    <h2>அத்தியாயம் 4: உள்ளமைந்த சுழற்சிகள்</h2>
    <h3>உள்ளமைந்த சுழற்சிகள் என்றால் என்ன?</h3>
    <p>உள்ளமைந்த சுழற்சிகள் என்பது மற்ற சுழற்சிகளுக்குள் உள்ள சுழற்சிகள். இதை ஒரு கிராமத் திருவிழாவை ஏற்பாடு செய்வது போல நினைத்துக் கொள்ளுங்கள்: திருவிழாவின் ஒவ்வொரு நாளுக்கும் (வெளியே உள்ள சுழற்சி), நீங்கள் ஒவ்வொரு கடையையும் அமைக்க வேண்டும் (உள்ளே உள்ள சுழற்சி).</p>
    <pre><code># ஒரு வடிவத்தை அச்சிடு
for row in range(1, 4): # வெளியே உள்ள சுழற்சி
    for column in range(1, 5): # உள்ளே உள்ள சுழற்சி
        print("*", end=" ")
    print() # ஒவ்வொரு வரிசைக்கும் பிறகு புதிய வரி</code></pre>

    <h2>அத்தியாயம் 5: சுழற்சிகளுடன் மேம்பட்ட நிபந்தனை தர்க்கம்</h2>
    <p>நமது சுழற்சிகளை மேலும் சக்தி வாய்ந்ததாக மாற்ற சிக்கலான நிபந்தனைகளை நாம் பயன்படுத்தலாம்.</p>
    <pre><code># 3 மற்றும் 5 ஆகிய இரண்டாலும் வகுபடும் எண்களைக் கண்டறியவும்
for number in range(1, 101):
    if number % 3 == 0 and number % 5 == 0:
        print(number)</code></pre>

    <h2>அத்தியாயம் 6: வடிவ அச்சிடல்</h2>
    <p>வடிவ அச்சிடல் என்பது சுழற்சிகளைப் பயிற்சி செய்ய ஒரு சிறந்த வழி. உள்ளமைந்த சுழற்சிகள் எவ்வாறு செயல்படுகின்றன என்பதையும் வெளியீட்டைக் கட்டுப்படுத்துவது எப்படி என்பதையும் இது புரிந்துகொள்ள நமக்கு உதவுகிறது.</p>
    <h3>செங்கோண முக்கோணம்</h3>
    <pre><code>rows = 5
for i in range(1, rows + 1):
    for j in range(i):
        print("*", end=" ")
    print()
</code></pre>

    <h2>அத்தியாயம் 7: மறுசுழற்சி சிக்கல் தீர்வு</h2>
    <p>சுழற்சிகளைக் கொண்டு சிக்கல்களைத் தீர்க்கும்போது, இந்த படிகளைப் பின்பற்றவும்: சிக்கலைப் புரிந்துகொள்வது, வடிவத்தைக் கண்டறிதல், சரியான சுழற்சியைத் தேர்ந்தெடுத்தல், தீர்வை எழுதுதல் மற்றும் உதாரணங்களுடன் சோதித்தல்.</p>
    <h3>சிக்கல்: பகா எண்களைக் கண்டறிதல்</h3>
    <pre><code># 1 முதல் 50 வரையிலான அனைத்து பகா எண்களையும் கண்டறியவும்
for number in range(2, 51):
    is_prime = True
    for divisor in range(2, number):
        if number % divisor == 0:
            is_prime = False
            break
    if is_prime:
        print(number, end=" ")
</code></pre>
`;

export const te = `

    <h2>పరిచయం</h2>
    <p>ప్రోగ్రామింగ్‌లో, మనం తరచుగా కొన్ని పనులను చాలాసార్లు పునరావృతం చేయాలి. ఒకే కోడ్‌ను మళ్లీ మళ్లీ రాయకుండా, పైథాన్ మనకు లూప్‌లను అందిస్తుంది. లూప్‌లను తన పొలంలో 100 మొక్కలకు నీరు పోయాల్సిన రైతులాగా ఆలోచించండి. ప్రతి మొక్క దగ్గరికి వ్యక్తిగతంగా వెళ్లి దాని గురించి విడిగా ఆలోచించే బదులు, అతను ఒక సాధారణ పద్ధతిని అనుసరిస్తాడు: మొక్క దగ్గరికి వెళ్లు, దానికి నీరు పోయి, తదుపరి మొక్క దగ్గరికి వెళ్లు, అన్ని మొక్కలకు నీరు పోసే వరకు పునరావృతం చేయి.</p>

    <h2>అధ్యాయం 1: for లూప్‌లు</h2>
    <h3>for లూప్ అంటే ఏమిటి?</h3>
    <p>ఒక నిర్దిష్ట సంఖ్యలో కోడ్ బ్లాక్‌ను పునరావృతం చేయాలనుకున్నప్పుడు for లూప్‌ను ఉపయోగిస్తాం. ఇది 1 నుండి 10 వరకు లెక్కించడం లేదా ఒక జాబితాలోని వస్తువుల ద్వారా ఒక్కొక్కటిగా వెళ్లడం వంటిది.</p>
    <pre><code># 1 నుండి 5 వరకు సంఖ్యలను ప్రింట్ చేయండి
for number in range(1, 6):
    print("సంఖ్య:", number)</code></pre>

    <h2>అధ్యాయం 2: while లూప్‌లు</h2>
    <h3>while లూప్ అంటే ఏమిటి?</h3>
    <p>ఒక నిర్దిష్ట షరతు నిజమైతే, while లూప్ కోడ్ బ్లాక్‌ను పునరావృతం చేస్తుంది. ఇది "ఏదైనా నిర్దిష్టంగా జరిగే వరకు ఇలా చేస్తూ ఉండు" అని చెప్పినట్లు. ఉదాహరణకు, "బకెట్ నిండే వరకు నీటిని వేస్తూ ఉండు."</p>
    <pre><code># while లూప్‌ను ఉపయోగించి 1 నుండి 5 వరకు లెక్కించండి
count = 1
while count <= 5:
    print("లెక్క:", count)
    count = count + 1 # చాలా ముఖ్యం: వేరియబుల్‌ను అప్‌డేట్ చేయండి</code></pre>

    <h2>అధ్యాయం 3: లూప్ నియంత్రణ ప్రకటనలు</h2>
    <p>కొన్నిసార్లు మనం మన లూప్‌లు ఎలా ప్రవర్తిస్తాయో నియంత్రించాల్సి ఉంటుంది. పైథాన్ దీని కోసం మనకు రెండు ప్రత్యేక కీవర్డ్‌లను ఇస్తుంది: <code>break</code> మరియు <code>continue</code>.</p>
    <h3>break ప్రకటన</h3>
    <p>break ప్రకటన లూప్‌ను వెంటనే ఆపివేసి, దాని నుండి బయటపడుతుంది.</p>
    <pre><code># 7తో భాగించబడే మొదటి సంఖ్యను కనుగొనండి
for number in range(1, 51):
    if number % 7 == 0:
        print(f"7తో భాగించబడే మొదటి సంఖ్య: {number}")
        break # లూప్ నుండి బయటపడండి</code></pre>
    <h3>continue ప్రకటన</h3>
    <p>continue ప్రకటన ప్రస్తుత పునరావృతం యొక్క మిగిలిన భాగాన్ని దాటవేసి, తదుపరి దానికి వెళ్తుంది.</p>
    <pre><code># 1 నుండి 10 వరకు ఉన్న అన్ని బేసి సంఖ్యలను ప్రింట్ చేయండి
for number in range(1, 11):
    if number % 2 == 0: # సంఖ్య సరి అయితే
        continue # తదుపరి పునరావృతంకు వెళ్ళండి
    print(f"బేసి సంఖ్య: {number}")</code></pre>

    <h2>అధ్యాయం 4: నెస్టెడ్ లూప్‌లు</h2>
    <h3>నెస్టెడ్ లూప్‌లు అంటే ఏమిటి?</h3>
    <p>నెస్టెడ్ లూప్‌లు అనేవి ఇతర లూప్‌ల లోపల ఉన్న లూప్‌లు. ఒక గ్రామంలోని జాతరను నిర్వహించినట్లు దీని గురించి ఆలోచించండి: జాతరలోని ప్రతి రోజుకు (బయటి లూప్), మీరు ప్రతి స్టాల్‌ను (లోపలి లూప్) ఏర్పాటు చేయాలి.</p>
    <pre><code># ఒక నమూనాను ప్రింట్ చేయండి
for row in range(1, 4): # బయటి లూప్
    for column in range(1, 5): # లోపలి లూప్
        print("*", end=" ")
    print() # ప్రతి అడ్డు వరుస తర్వాత కొత్త అడ్డు వరుస</code></pre>

    <h2>అధ్యాయం 5: లూప్‌లతో అధునాతన షరతుతో కూడిన తర్కం</h2>
    <p>మన లూప్‌లను మరింత శక్తివంతంగా చేయడానికి మనం సంక్లిష్ట షరతులను ఉపయోగించవచ్చు.</p>
    <pre><code># 3 మరియు 5 రెండింటితో భాగించబడే సంఖ్యలను కనుగొనండి
for number in range(1, 101):
    if number % 3 == 0 and number % 5 == 0:
        print(number)</code></pre>

    <h2>అధ్యాయం 6: నమూనా ప్రింటింగ్</h2>
    <p>నమూనా ప్రింటింగ్ అనేది లూప్‌లను సాధన చేయడానికి ఒక గొప్ప మార్గం. ఇది నెస్టెడ్ లూప్‌లు ఎలా పనిచేస్తాయో మరియు అవుట్‌పుట్‌ను ఎలా నియంత్రించాలో అర్థం చేసుకోవడానికి మనకు సహాయపడుతుంది.</p>
    <h3>లంబ కోణ త్రిభుజం</h3>
    <pre><code>rows = 5
for i in range(1, rows + 1):
    for j in range(i):
        print("*", end=" ")
    print()
</code></pre>

    <h2>అధ్యాయం 7: పునరావృత సమస్య పరిష్కారం</h2>
    <p>లూప్‌లతో సమస్యలను పరిష్కరించేటప్పుడు, ఈ దశలను అనుసరించండి: సమస్యను అర్థం చేసుకోండి, నమూనాను గుర్తించండి, సరైన లూప్‌ను ఎంచుకోండి, పరిష్కారాన్ని వ్రాయండి మరియు ఉదాహరణలతో పరీక్షించండి.</p>
    <h3>సమస్య: ప్రధాన సంఖ్యలను కనుగొనడం</h3>
    <pre><code># 1 మరియు 50 మధ్య ఉన్న అన్ని ప్రధాన సంఖ్యలను కనుగొనండి
for number in range(2, 51):
    is_prime = True
    for divisor in range(2, number):
        if number % divisor == 0:
            is_prime = False
            break
    if is_prime:
        print(number, end=" ")
</code></pre>
`;